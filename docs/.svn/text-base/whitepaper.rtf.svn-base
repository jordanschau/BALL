{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf110
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 CourierNewPSMT;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\margb1800\margt1800
\deftab720
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural

\f0\fs24 \cf0 \expnd0\expndtw0\kerning0
\up0 \nosupersub \ulnone \outl0\strokewidth0 \strokec0 *Intro*\uc0\u8232 BALL is a language designed for analyzing and simulating sports games, in particular baseball. It is designed to help the user view and analyze a baseball match or season, through the help of statistical data gathered for the teams and each player in the team and simulations.\u8232 \u8232 BALL takes one or more database files that contain information about baseball teams. Each file will have an entry for each player on the team, and statistical data for each player such as OBP (on-base percentage), batting average, earned run average (ERA) and so on. (for those unfamiliar with baseball terminology, we have provided a small glossary in the back of this document) A user can give a command to BALL to format and display statistics for the teams, or run a simulation of a match between the two teams.\u8232 \u8232 This document will explain the twelve features of BALL and how each feature makes BALL an effective tool for analyzing and simulating baseball.\u8232 \u8232 *Scalable*\u8232 Sporting events come in all sizes, from informal two-team games to an entire national league and possibly beyond. Baseball is no exception, and BALL is able to handle that. There is no set limit on the database or program size, be it a small school tournament or the entire Major League. BALL can also simulate games from just a single match to a whole season with various teams. In particular, a single simulation based on a database of two teams will take roughly the same amount of time as a game based on the entire thirty teams of Major League Baseball. BALL does this through clever use of its resources such that database items for other teams will not obstruct the two teams currently playing. Therefore, maintainers of database files need not worry about their increasing collection of baseball statistics.\u8232 \u8232 *Realistic*\u8232 Being a simulator, a key requirement for BALL is to be able to play out a \'93life-like\'94 baseball game entirely inside the computer. A BALL game will be based on the statistics fed to it, which gives the program a very sterile and rough approximation of a player's skill. BALL then plays these statistics with the opposing team's and constructs a scenario that will look as much like a real life game as possible. Thus each game will not be so random that the statistical data has no correlation with the results, but also not purely deterministic that one can determine the winner just by looking at the numbers. A user running a game will see that teams with better averages are more likely to win, but unexpected things can occur, something that made real life baseball the very exciting sport we see today.\
\
\
Abstracted - BALL is designed from the ground up to liberate users from many of the tedious details required to run effective and realistic simulations. \'a0 Specifically BALL is able to obtain data over the internet (see Network Savvy) to maintain its statistical databases current, as well as a fair amount of mathematical functions necessary to calculate the basic baseball 
\i \expnd0\expndtw0\kerning0
sabermetrics
\i0 \expnd0\expndtw0\kerning0
 are included which allow users to build upon as they see fit. \'a0\'a0\
\'a0\
Network Savvy - BALL is built to take advantage of the plentiful data resources available on the internet. \'a0BALL has built-in functionality to connect to internet resources, whether these be from the standard provided or user customized, and automatically update its internal databases to guarantee the most realistic simulation possible (see Realistic). \'a0\
\'a0\
High Performance - BALL is unique in its design, since from its very inception it was envisioned to focus on athletic simulations, specifically baseball. \'a0Therefore, several choices were made that enhance its performance in dealing with data manipulation and computation. \'a0The database backend was specifically chosen to allow BALL fast streamlined access to all required statistical data needed for the simulations, and the computational functions are tailored to take advantage of todays high performance processors.\
\
Expandable - One of our main focuses in designing BALL is allowing the user to add statistical data to the various preexisting tables of data as well as defining new statistics as they see fit.\'a0 This aspect is the key to BALLs expandability.\'a0 Just as a user can define new stats, he similarly can define new rules or even new games.\'a0 That ability is what leads to users being able to create modules which can contain any other sport or game (see Modular).\'a0 In effect, BALL can be expanded to include any sport or game. \'a0\
\'a0\
User Friendly - The applications in BALL be be mostly shorter one to two line applications and most of the computational \'93heavy lifting\'94 will be managed and handled by the compiler.\'a0 In their simplest form BALL programs will look like the following:\
\
			
\f1 \expnd0\expndtw0\kerning0
BALL sim(Dodgers, Yankees, 5)\
			BALL ERA(Manny Ramirez)
\f0 \expnd0\expndtw0\kerning0
\
\'a0\
It is very easy to see what this application does, it simulates 5 games between the Dodgers and the Yankees.\'a0 Furthermore, many of the functions provided by BALL will be either known abbreviations of English words or known stats of the actual game.\'a0 This will allow anyone who is familiar with the sport\'92s stats to effortlessly access the data and create BALL applications. \'a0\
\'a0\
Modular - BALL is designed to be not a simulator/language only for baseball, but rather for any sport in which a concrete rule system exists and in which statistical data can be collected. As a result, it is possible that other games could be ported to BALL if modules are rewritten. This also enables users to modify rules of the game being analyzed for purposes of interesting simulations, as well as create new games entirely and use BALL to maintain statistical data for their game.\
\'a0\
Future-proof - Thanks to its modular construction, (see Modular) BALL is future-proofed against rule changes, statistical changes, and even entire new games in which statistical data can be collected. Programmers writing BALL scripts can import new rules, create new benchmark statistics, import entirely different games and data, and thus completely change the usage of BALL. As a result, it is possible external (non-athletic) data manipulation could be handled with BALL.\
\'a0\
Focused - BALL is focused on athletic applications, specifically on simulating baseball games and maintaining and understanding/interpreting baseball statistics and sabermetrics. Because baseball is a sport with much statistical data, BALL is built for baseball, but can be expanded to other sports (see Future-proof). Nonetheless BALL is focused on athletic applications, and their statistical and logical interpretations.}